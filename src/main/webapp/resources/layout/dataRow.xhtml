<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:composite="http://java.sun.com/jsf/composite">

	<!-- cmw 1/14/14
	basic layout component that uses Bootstrap 3's grid system
	to generate tabular data in a responsive layout
	
	Features: 
	
	vertical layout: stacks labels on top of content, both full grid width
	
	horizontal layout: supply a width for the label and the data width is calculated for you
	
	autogenerated URLS: by supplying baseURL and displayPath, collections of objects will be rendered as links
	
	maxItems: show collection items up to an arbitrary number with error checking to catch 
	indexOutOfBounds exceptions. Default is 10
	
	Note that you'll want to wrap this in a div with the class
	"dataDisplay" in order to get extra styling. I started to write a dataGrid tag
	that would take a collection of these in order to do so, but dealing with
	heterogeneous data - e.g, label/text, label/text/image, datatable - made
	it not time efficient to write. -->

	<composite:interface
		displayName="displays a row of data - relies on Bootstrap 3">
		<composite:attribute name="label" displayName="the label"
			type="String" required="false" />

		<composite:attribute name="data" displayName="data as single item"
			required="false" />

		<composite:attribute name="collection"
			displayName="data as a collection" required="false" />

		<composite:attribute name="labelWidth"
			displayName="width of the label in Bootstrap grid units - the data width will be calculated from here"
			type="String" required="false" default="2" />

		<composite:attribute name="baseURL" displayName="a base URL for data"
			type="String" required="false" />

		<!--  apollo: adds for static URL, static URL link anchor, gene symbol,nursa url label and url param -->
		<composite:attribute name="staticURL"
			displayName="static URL link anchor , eg links to reagent catalog site"
			type="String" required="false" />
		<composite:attribute name="staticUrlDisplayPath"
			displayName="static string to use as link anchor , eg links to ptm phosphosite site"
			type="String" required="false" />
		<composite:attribute name="geneOfficialSymbol" displayName="Official symbol"
			type="String" required="false" />
		<composite:attribute name="nursaUrlLabel" displayName="internal NURSA Url label"
			type="String" required="false" />
		<composite:attribute name="urlParam" displayName="Url params"
			type="String" required="false" />
		
		<composite:attribute name="displayPath"
			displayName="assuming the data are a collection of objects, this is the field name to access to get to the 
			display/URL ID value"
			type="String" required="false" />

		<composite:attribute name="layout"
			displayName="default is in two columns; vertical puts label on top"
			type="String" default="horizontal" required="false" />

		<composite:attribute name="maxItems"
			displayName="maximum number of list items to display. Additional items will be displayed by a 'more' link"
			required="false" default="10" />
			
		<composite:attribute name="dateTimeFormat" displayName="Formating of a dateTime field"
			required="false" />
	</composite:interface>
	<composite:implementation>

		<!-- calculate a default dataWidth from the labelWidth. Can't do it in the interface if the
	labelWidth isn't specified, so we do it here
	also, set it to 12 if the layout is vertical  -->
		<ui:param name="dataWidth"
			value="#{cc.attrs.layout=='vertical'?12:12-cc.attrs.labelWidth}" />

		<div class="row">
			<!-- horizontal layout -->
			<!-- vertical layout integrates the label into the content div ;) -->
			<h:panelGroup layout="block"
				styleClass="col-md-#{cc.attrs.labelWidth}"
				rendered="#{cc.attrs.layout=='horizontal'}">
				<strong>#{cc.attrs.label}</strong>
			</h:panelGroup>

			<div class="col-md-#{dataWidth}">

				<!-- for vertical layout, display the label right here -->
				<h:panelGroup rendered="#{cc.attrs.layout=='vertical' and not empty cc.attrs.label}">
					<strong>#{cc.attrs.label}</strong>
					<br />
				</h:panelGroup>

				<!-- single value -->
				<h:outputText rendered="#{!empty cc.attrs.data and empty cc.attrs.staticURL and empty cc.attrs.dateTimeFormat}" value="#{cc.attrs.data}" />
				
				<!-- single value with date format -->
				<h:outputText rendered="#{!empty cc.attrs.data and empty cc.attrs.staticURL and !empty cc.attrs.dateTimeFormat}" value="#{cc.attrs.data}">
					<f:convertDateTime pattern="#{cc.attrs.dateTimeFormat}" />
				</h:outputText>

				<!-- apollo  to accomodate nursa internal links 
				TODO Generalize these links and allow multiple URL parameters -->
				<h:panelGroup rendered="#{empty cc.attrs.collection and not empty cc.attrs.nursaUrlLabel}">
					<h:link value="#{cc.attrs.nursaUrlLabel}" outcome="./index.jsf">
						<f:param name="doi" value="#{cc.attrs.urlParam}" />
					</h:link>
				</h:panelGroup>
				
				<h:panelGroup rendered="#{empty cc.attrs.collection and empty cc.attrs.nursaUrlLabel and not empty cc.attrs.staticURL}">
					<a
							href="#{cc.attrs.staticURL}"
							target="_blank">#{(not empty cc.attrs.data)?cc.attrs.data:''}</a>
				</h:panelGroup>
				
				<!-- apollo:collection of simple type, eg strings -->
				<h:panelGroup
					rendered="#{!empty cc.attrs.collection and empty cc.attrs.displayPath and empty cc.attrs.baseURL}">
					<ui:repeat
						value="#{dataRowBean.truncateList(cc.attrs.collection,cc.attrs.maxItems)}"
						var="item" varStatus="status">
								#{item}<h:outputText
							rendered="#{!status.last}" value="; " />
					</ui:repeat>
					<ui:fragment
						rendered="#{cc.attrs.collection.size() gt cc.attrs.maxItems}">
						<h:outputText value = " "/>
					<a href = "#" onclick = "PF('#{cc.clientId}moreBox').show();return false;">
					more...
					</a>
					
					<p:dialog widgetVar="#{cc.clientId}moreBox" modal = "true"
					width = "600" header = "#{cc.attrs.label}">
							<div class = "molDialog">
							<ui:repeat
								value="#{cc.attrs.collection}"
								var="item" varStatus="status">
								#{item}<h:outputText
									rendered="#{!status.last}" value="; " />
							</ui:repeat>
							</div>
						</p:dialog>
					</ui:fragment>
				</h:panelGroup>
				
				<!-- collection
				there is some DRY violation with the partial and full collections being shown
				here and in the links, but I'm not sure if it's worth having another component for
				this iterating logic -->
				<h:panelGroup
					rendered="#{!empty cc.attrs.collection and !empty cc.attrs.displayPath and empty cc.attrs.baseURL}">
					<ui:repeat
						value="#{dataRowBean.truncateList(cc.attrs.collection,cc.attrs.maxItems)}"
						var="item" varStatus="status">
							#{item[cc.attrs.displayPath]}
							<h:outputText rendered="#{!status.last}" value="; " />
					</ui:repeat>
					<ui:fragment rendered="#{cc.attrs.collection.size() gt cc.attrs.maxItems}">
						<h:outputText value = " "/>
						<a href = "#" onclick = "PF('#{cc.clientId}moreBox').show();return false;">more...</a>
					
						<!-- NB the use of clientId to namespace this panel in order to accommodate
						this component being called multiple times on the same page :) -->
						<p:dialog widgetVar="#{cc.clientId}moreBox" modal = "true"
						width = "600" header = "#{cc.attrs.label}">
							<div class = "molDialog">
							<ui:repeat
								value="#{cc.attrs.collection}"
								var="item" varStatus="status">
								#{item[cc.attrs.displayPath]}<h:outputText
									rendered="#{!status.last}" value="; " />
							</ui:repeat>
							</div>
						</p:dialog>
					</ui:fragment>
				</h:panelGroup>

				<!-- collection with links somewhat not DRY, but clearer this way -->
					
				<h:panelGroup
					rendered="#{!empty cc.attrs.collection and !empty cc.attrs.baseURL }">
					<ui:repeat
						value="#{dataRowBean.truncateList(cc.attrs.collection,cc.attrs.maxItems)}"
						var="item" varStatus="status">
						<a
							href="#{urlUtil.calculatedUrl(cc.attrs.baseURL,item[cc.attrs.displayPath],cc.attrs.geneOfficialSymbol)}"
							target="_blank"> #{(empty cc.attrs.staticUrlDisplayPath)?item[cc.attrs.displayPath]:cc.attrs.staticUrlDisplayPath}</a>
						<h:outputText rendered="#{!status.last}" value=", " />
					</ui:repeat>
					<ui:fragment
						rendered="#{cc.attrs.collection.size() gt cc.attrs.maxItems}">
						<h:outputText value = " "/>
						<a href = "#" onclick = "PF('#{cc.clientId}moreBox').show();return false;">more...</a>
						<!-- NB the use of clientId to namespace this panel in order to accommodate
						this component being called multiple times on the same page :) -->
						<p:dialog widgetVar="#{cc.clientId}moreBox" modal = "true" width = "600" header = "#{cc.attrs.label}">
							<ui:repeat
								value="#{cc.attrs.collection}"
								var="item" varStatus="status">
								#{item[cc.attrs.displayPath]}<h:outputText
									rendered="#{!status.last}" value=", " />
							</ui:repeat>
						</p:dialog>
					</ui:fragment>
				</h:panelGroup>

				<!-- empty values :( 
						TODO check for empty body, as well-->
				<h:outputText
					rendered="#{empty cc.attrs.data and empty cc.attrs.collection and empty cc.attrs.nursaUrlLabel}"
					value="Not available" />

				<!-- TODO passthru logic for tag body
				
				basic syntax to retrieve tag body for a future passthru implementation
				tag is composite:insertChildren
				 -->
			</div>
		</div>

	</composite:implementation>
</ui:composition>